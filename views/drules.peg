Type <- TypeCtors? BasicType
TypeCtors <- TypeCtor+
TypeCtor <- "shared" / "inout" / "immutable" / "const"
BasicType <- TypeCtor "(" Type ")" / Typeof "." IdentifierList / Typeof / IdentifierList / "." IdentifierList / BasicTypeX
BasicTypeX <- "void" / "creal" / "cdouble" / "cfloat" / "ireal" / "idouble" / "ifloat" / "real" / "double" / "float" / "dchar" / "wchar" / "char" / "ulong" / "long" / "uint" / "int" / "ushort" / "short" / "ubyte" / "byte" / "bool"
BasicType2 <- "function" Parameters FunctionAttributes? / "delegate" Parameters MemberFunctionAttributes? / "[" Type "]" / "[" AssignExpression ".." AssignExpression "]" / "[" AssignExpression "]" / "[" "]" / "*"
IdentifierList <- TemplateInstance "." IdentifierList / TemplateInstance / @identifier "." IdentifierList / @identifier
Typeof <- "typeof" "(" "return" ")" / "typeof" "(" Expression ")"
Expression <- CommaExpression
CommaExpression <- AssignExpression "," CommaExpression / AssignExpression
AssignExpression <- ConditionalExpression "^^=" AssignExpression / ConditionalExpression ">>>=" AssignExpression / ConditionalExpression ">>=" AssignExpression / ConditionalExpression "<" "<" "=" AssignExpression / ConditionalExpression "~=" AssignExpression / ConditionalExpression "^=" AssignExpression / ConditionalExpression "|=" AssignExpression / ConditionalExpression "&=" AssignExpression / ConditionalExpression "%=" AssignExpression / ConditionalExpression "/=" AssignExpression / ConditionalExpression "*=" AssignExpression / ConditionalExpression "-=" AssignExpression / ConditionalExpression "+=" AssignExpression / ConditionalExpression "=" AssignExpression / ConditionalExpression
ConditionalExpression <- OrOrExpression "?" Expression ":" ConditionalExpression / OrOrExpression
OrOrExpression <- AndAndExpression / OrOrExpression "||" AndAndExpression
AndAndExpression <- AndAndExpression "&&" CmpExpression / AndAndExpression "&&" OrExpression / CmpExpression / OrExpression
OrExpression <- XorExpression / OrExpression "|" XorExpression
XorExpression <- AndExpression / XorExpression "^" AndExpression
AndExpression <- AndExpression "&" ShiftExpression / ShiftExpression 
CmpExpression <- InExpression / RelExpression / IdentityExpression / EqualExpression / ShiftExpression
EqualExpression <- ShiftExpression "!=" ShiftExpression / ShiftExpression "==" ShiftExpression
IdentityExpression <- ShiftExpression "!is" ShiftExpression / ShiftExpression "is" ShiftExpression
RelExpression <- ShiftExpression "!<=" ShiftExpression / ShiftExpression "!<" ShiftExpression / ShiftExpression "!>=" ShiftExpression / ShiftExpression "!>" ShiftExpression / ShiftExpression "<>=" ShiftExpression / ShiftExpression "<>" ShiftExpression / ShiftExpression "!<>" ShiftExpression / ShiftExpression "!<>=" ShiftExpression / ShiftExpression ">=" ShiftExpression / ShiftExpression ">" ShiftExpression / ShiftExpression "<=" ShiftExpression / ShiftExpression "<" ShiftExpression
InExpression <- ShiftExpression "!in" ShiftExpression / ShiftExpression "in" ShiftExpression
ShiftExpression <- AddExpression / ShiftExpression ">>>" AddExpression / ShiftExpression ">>" AddExpression / ShiftExpression "<<" AddExpression
AddExpression <- AddExpression "~" MulExpression / AddExpression "-" MulExpression / AddExpression "+" MulExpression / MulExpression
MulExpression <- MulExpression "%" UnaryExpression / MulExpression "/" UnaryExpression / MulExpression "*" UnaryExpression / UnaryExpression
UnaryExpression <- PowExpression / CastExpression / DeleteExpression / "(" Type ")" "." TemplateInstance / "(" Type ")" "." @identifier / ComplementExpression / "!" UnaryExpression / "+" UnaryExpression / "-" UnaryExpression / "*" UnaryExpression / "--" UnaryExpression / "++" UnaryExpression / "&" UnaryExpression
ComplementExpression <- "~" UnaryExpression
NewExpression <- NewExpressionWithArgs / "new" AllocatorArguments? Type
NewExpressionWithArgs <- NewAnonClassExpression / "new" AllocatorArguments? Type "(" ArgumentList? ")" / "new" AllocatorArguments? Type "[" AssignExpression "]"
AllocatorArguments <- "(" ArgumentList? ")"
ArgumentList <- AssignExpression "," ArgumentList / AssignExpression "," / AssignExpression
NewAnonClassExpression <- "new" AllocatorArguments? "class" ClassArguments? SuperClass? Interfaces? AggregateBody
ClassArguments <- "(" ArgumentList? ")"
DeleteExpression <- "delete" UnaryExpression
CastExpression <- "cast" "(" TypeCtors? ")" UnaryExpression / "cast" "(" Type ")" UnaryExpression
PowExpression <- PostfixExpression "^^" UnaryExpression / PostfixExpression
PostfixExpression <- TypeCtors BasicType "(" ArgumentList? ")" / PostfixExpression "[" AssignExpression ".." AssignExpression "]" / PostfixExpression "[" "]" / PostfixExpression "[" ArgumentList "]" / PostfixExpression "(" ArgumentList? ")" / PostfixExpression "--" / PostfixExpression "++" / PostfixExpression "." NewExpression / PostfixExpression "." TemplateInstance / PostfixExpression "." @identifier / PrimaryExpression
PrimaryExpression <- SpecialKeyword / TraitsExpression / "(" Expression ")" / IsExpression / TypeidExpression / Typeof / BasicTypeX "." @identifier / NewExpressionWithArgs / ImportExpression / MixinExpression / AssertExpression / FunctionLiteral / AssocArrayLiteral / ArrayLiteral / StringLiterals / @characterLiteral / @floatLiteral / @integerLiteral / "$" / "false" / "true" / "null" / "super" / "this" / "." TemplateInstance / TemplateInstance / "." @identifier / @identifier
StringLiterals <- @stringLiteral+
ArrayLiteral <- "[" ArgumentList? "]"
AssocArrayLiteral <- "[" KeyValuePairs "]"
KeyValuePairs <- KeyValuePair ("," KeyValuePair)*
KeyValuePair <- KeyExpression ":" ValueExpression
KeyExpression <- AssignExpression
ValueExpression <- AssignExpression
FunctionLiteral <- Lambda / FunctionLiteralBody / ParameterAttributes FunctionLiteralBody / "delegate" Type? ParameterAttributes? FunctionLiteralBody / "function" Type? ParameterAttributes? FunctionLiteralBody
ParameterAttributes <- Parameters FunctionAttributes / Parameters
FunctionLiteralBody <- FunctionContracts? BodyStatement / BlockStatement
Lambda <- @identifier "=>" AssignExpression / ParameterAttributes "=>" AssignExpression / "delegate" Type? ParameterAttributes "=>" AssignExpression / "function" Type? ParameterAttributes "=>" AssignExpression
AssertExpression <- "assert" "(" AssignExpression "," AssignExpression ")" / "assert" "(" AssignExpression ")"
MixinExpression <- "mixin" "(" AssignExpression ")"
ImportExpression <- "import" "(" AssignExpression ")"
TypeidExpression <- "typeid" "(" Expression ")" / "typeid" "(" Type ")"
IsExpression <- "is" "(" Type @identifier "==" TypeSpecialization "," TemplateParameterList ")" / "is" "(" Type @identifier ":" TypeSpecialization "," TemplateParameterList ")" / "is" "(" Type @identifier "==" TypeSpecialization ")" / "is" "(" Type @identifier ":" TypeSpecialization ")" / "is" "(" Type @identifier ")" / "is" "(" Type "==" TypeSpecialization "," TemplateParameterList ")" / "is" "(" Type ":" TypeSpecialization "," TemplateParameterList ")" / "is" "(" Type "==" TypeSpecialization ")" / "is" "(" Type ":" TypeSpecialization ")" / "is" "(" Type ")"
TypeSpecialization <- "__parameters" / "return" / "shared" / "inout" / "immutable" / "const" / "super" / "delegate" / "function" / "enum" / "interface" / "class" / "union" / "struct" / Type
TraitsExpression <- "__traits" "(" TraitsKeyword "," TraitsArguments ")"
TraitsKeyword <- "compiles" / "isSame" / "derivedMembers" / "allMembers" / "getVirtualIndex" / "classInstanceSize" / "parent" / "getUnitTests" / "getVirtualMethods" / "getVirtualFunctions" / "getProtection" / "getOverloads" / "getMember" / "getAttributes" / "getAliasThis" / "identifier" / "hasMember" / "isLazy" / "isOut" / "isRef" / "isOverrideFunction" / "isStaticFunction" / "isFinalFunction" / "isAbstractFunction" / "isVirtualMethod" / "isVirtualFunction" / "isUnsigned" / "isStaticArray" / "isScalar" / "isIntegral" / "isFloating" / "isNested" / "isPOD" / "isFinalClass" / "isAssociativeArray" / "isArithmetic" / "isAbstractClass"
TraitsArguments <- TraitsArgument ("," TraitsArgument)*
TraitsArgument <- Type / AssignExpression
SpecialKeyword <- "__PRETTY_FUNCTION__" / "__FUNCTION__" / "__LINE__" / "__MODULE__" / "__FILE__"
Statement <- ScopeBlockStatement / NonEmptyStatement / ";"
NoScopeNonEmptyStatement <- BlockStatement / NonEmptyStatement
NoScopeStatement <- BlockStatement / NonEmptyStatement / ";"
NonEmptyOrScopeBlockStatement <- ScopeBlockStatement / NonEmptyStatement
NonEmptyStatement <- DefaultStatement / CaseRangeStatement / CaseStatement / NonEmptyStatementNoCaseNoDefault
NonEmptyStatementNoCaseNoDefault <- ImportDeclaration / TemplateMixin / StaticAssert / ConditionalStatement / ForeachRangeStatement / MixinStatement / PragmaStatement / ThrowStatement / ScopeGuardStatement / TryStatement / SynchronizedStatement / WithStatement / GotoStatement / ReturnStatement / BreakStatement / ContinueStatement / FinalSwitchStatement / SwitchStatement / ForeachStatement / ForStatement / DoStatement / WhileStatement / IfStatement / DeclarationStatement / ExpressionStatement / LabeledStatement
ScopeStatement <- BlockStatement / NonEmptyStatement
ScopeBlockStatement <- BlockStatement
LabeledStatement <- @identifier ":" Statement / @identifier ":" NoScopeStatement / @identifier ":"
BlockStatement <- "{" StatementList "}" / "{" "}"
StatementList <- Statement StatementList / Statement
ExpressionStatement <- Expression ";"
DeclarationStatement <- Declaration
IfStatement <- "if" "(" IfCondition ")" ThenStatement "else" ElseStatement / "if" "(" IfCondition ")" ThenStatement
IfCondition <- TypeCtors? BasicType Declarator "=" Expression / TypeCtors @identifier "=" Expression / "auto" @identifier "=" Expression / Expression
ThenStatement <- ScopeStatement
ElseStatement <- ScopeStatement
WhileStatement <- "while" "(" Expression ")" ScopeStatement
DoStatement <- "do" ScopeStatement "while" "(" Expression ")" ";"
ForStatement <- "for" "(" Initialize Test? ";" Increment? ")" ScopeStatement
Initialize <- NoScopeNonEmptyStatement / ";"
Test <- Expression
Increment <- Expression
ForeachStatement <- Foreach "(" ForeachTypeList ";" ForeachAggregate ")" NoScopeNonEmptyStatement
Foreach <- "foreach_reverse" / "foreach"
ForeachTypeList <- ForeachType ("," ForeachType)*
ForeachType <- "ref"? TypeCtors? @identifier / "ref"? TypeCtors? BasicType Declarator
ForeachAggregate <- Expression
ForeachRangeStatement <- Foreach "(" ForeachType ";" LwrExpression ".." UprExpression ")" ScopeStatement
LwrExpression <- Expression
UprExpression <- Expression
SwitchStatement <- "switch" "(" Expression ")" ScopeStatement
CaseStatement <- "case" ArgumentList ":" ScopeStatementList
CaseRangeStatement <- "case" FirstExp ":" ".." "case" LastExp ":" ScopeStatementList
FirstExp <- AssignExpression
LastExp <- AssignExpression
DefaultStatement <- "default" ":" ScopeStatementList
ScopeStatementList <- StatementListNoCaseNoDefault
StatementListNoCaseNoDefault <- StatementNoCaseNoDefault StatementListNoCaseNoDefault / StatementNoCaseNoDefault
StatementNoCaseNoDefault <- ScopeBlockStatement / NonEmptyStatementNoCaseNoDefault / ";"
FinalSwitchStatement <- "final" "switch" "(" Expression ")" ScopeStatement
ContinueStatement <- "continue" @identifier? ";"
BreakStatement <- "break" @identifier? ";"
ReturnStatement <- "return" Expression? ";"
GotoStatement <- "goto" "case" Expression ";" / "goto" "case" ";" / "goto" "default" ";" / "goto" @identifier ";"
WithStatement <- "with" "(" TemplateInstance ")" ScopeStatement / "with" "(" Symbol ")" ScopeStatement / "with" "(" Expression ")" ScopeStatement
SynchronizedStatement <- "synchronized" "(" Expression ")" ScopeStatement / "synchronized" ScopeStatement
TryStatement <- "try" ScopeStatement FinallyStatement / "try" ScopeStatement Catches FinallyStatement / "try" ScopeStatement Catches
Catches <- Catch Catches / Catch / LastCatch
LastCatch <- "catch" NoScopeNonEmptyStatement
Catch <- "catch" "(" CatchParameter ")" NoScopeNonEmptyStatement
CatchParameter <- BasicType @identifier
FinallyStatement <- "finally" NoScopeNonEmptyStatement
ThrowStatement <- "throw" Expression ";"
ScopeGuardStatement <- "scope" "(" "failune" ")" NonEmptyOrScopeBlockStatement / "scope" "(" "success" ")" NonEmptyOrScopeBlockStatement / "scope" "(" "exit" ")" NonEmptyOrScopeBlockStatement
PragmaStatement <- Pragma NoScopeStatement
MixinStatement <- "mixin" "(" AssignExpression ")" ";"
Declaration <- AliasDeclaration / ImportDeclaration / EnumDeclaration / AggregateDeclaration / VarDeclarations / FuncDeclaration
AliasDeclaration <- "alias" AliasDeclarationX ";" / "alias" StorageClasses? BasicType FuncDeclarator ";" / "alias" StorageClasses? BasicType Declarator ";"
AliasDeclarationX <- AliasDeclarationX "," @identifier TemplateParameters? "=" StorageClasses? Type / @identifier TemplateParameters? "=" StorageClasses? Type
AutoDeclaration <- StorageClasses AutoDeclarationX ";"
AutoDeclarationX <- AutoDeclarationX "," @identifier TemplateParameters? "=" Initializer / @identifier TemplateParameters? "=" Initializer
VarDeclarations <- AutoDeclaration / StorageClasses? BasicType Declarators ";"
Declarators <- DeclaratorInitializer ("," DeclaratorInitializer)*
DeclaratorInitializer <- VarDeclarator TemplateParameters? "=" Initializer / VarDeclarator
Declarator <- VarDeclarator
VarDeclarator <- BasicType2? @identifier
StorageClasses <- StorageClass StorageClasses / StorageClass
StorageClass <- "ref" / "pure" / "nothrow" / Property / "__gshared" / "shared" / "inout" / "immutable" / "const" / "scope" / "auto" / "synchronized" / "override" / "final" / "abstract" / "extern" / "static" / "enum" / "deprecated" / AlignAttribute / LinkageAttribute
Initializer <- NonVoidInitializer / VoidInitializer
VoidInitializer <- "void"
NonVoidInitializer <- StructInitializer / ArrayInitializer / ExpInitializer
ExpInitializer <- AssignExpression
ArrayInitializer <- "[" ArrayMemberInitializations? "]"
ArrayMemberInitializations <- ArrayMemberInitialization ("," ArrayMemberInitialization)* ","?
ArrayMemberInitialization <- AssignExpression ":" NonVoidInitializer / NonVoidInitializer
StructInitializer <- "{" StructMemberInitializers? "}"
StructMemberInitializers <- StructMemberInitializer ("," StructMemberInitializers)* ","?
StructMemberInitializer <- @identifier ":" NonVoidInitializer / NonVoidInitializer
FuncDeclaration <- AutoFuncDeclaration / StorageClasses? BasicType FuncDeclarator FunctionBody
AutoFuncDeclaration <- StorageClasses @identifier FuncDeclaratorSuffix FunctionBody
FuncDeclarator <- BasicType2? @identifier FuncDeclaratorSuffix
FuncDeclaratorSuffix <- TemplateParameters Parameters MemberFunctionAttributes? Constraint? / Parameters MemberFunctionAttributes?
Parameters <- "(" ParameterList? ")"
ParameterList <- "..." / Parameter ("," Parameter)*
Parameter <-  InOut? BasicType Declarator "=" AssignExpression / InOut? BasicType Declarator "..." / InOut? BasicType Declarator / InOut? Type "..." / InOut? Type
InOut <- InOut InOutX / InOutX
InOutX <- "scope" / "ref" / "out" / "lazy" / "in" / "final" / TypeCtor / "auto"
FunctionAttributes <- FunctionAttribute+
FunctionAttribute <- Property / "pure" / "nothrow"
MemberFunctionAttributes <- MemberFunctionAttribute+
MemberFunctionAttribute <- FunctionAttribute / "shared" / "inout" / "immutable" / "const"
FunctionBody <- FunctionContracts / FunctionContracts? BodyStatement / BlockStatement
FunctionContracts <- OutStatement InStatement? / InStatement OutStatement?
InStatement <- "in" BlockStatement
OutStatement <- "out" "(" @identifier ")" BlockStatement / "out" BlockStatement
BodyStatement <- "body" BlockStatement
Constructor <- ConstructorTemplate / "this" Parameters MemberFunctionAttributes? FunctionBody / "this" Parameters MemberFunctionAttributes? ";"
ConstructorTemplate <- "this" TemplateParameters Parameters MemberFunctionAttributes? Constraint? FunctionBody / "this" TemplateParameters Parameters MemberFunctionAttributes? Constraint? ";"
Destructor <- "~" "this" "(" ")" MemberFunctionAttributes? FunctionBody / "~" "this" "(" ")" MemberFunctionAttributes? ";"
Postblit <- "this" "(" "this" ")" MemberFunctionAttributes? FunctionBody / "this" "(" "this" ")" MemberFunctionAttributes? ";"
Allocator <- "new" Parameters FunctionBody / "new" Parameters ";"
Deallocator <- "delete" Parameters FunctionBody / "delete" Parameters ";"
Invariant <- "invariant" "(" ")" BlockStatement
UnitTest <- "unittest" BlockStatement
StaticConstructor <- "static" "this" "(" ")" FunctionBody / "static" "this" "(" ")" ";"
StaticDestructor <- "static" "~" "this" "(" ")" MemberFunctionAttributes? FunctionBody / "static" "~" "this" "(" ")" MemberFunctionAttributes? ";"
SharedStaticConstructor <- "shared" "static" "this" "(" ")" FunctionBody / "shared" "static" "this" "(" ")" ";"
SharedStaticDestructor <- "shared" "static" "~" "this" "(" ")" MemberFunctionAttributes? FunctionBody / "shared" "static" "~" "this" "(" ")" MemberFunctionAttributes? ";"
AggregateDeclaration <- UnionDeclaration / StructDeclaration / InterfaceDeclaration / ClassDeclaration
ClassDeclaration <- ClassTemplateDeclaration / "class" @identifier BaseClassList? AggregateBody / "class" @identifier ";"
ClassTemplateDeclaration <- "class" @identifier TemplateParameters BaseClassList Constraint AggregateBody / "class" @identifier TemplateParameters Constraint? BaseClassList? AggregateBody
InterfaceDeclaration <- InterfaceTemplateDeclaration / "interface" @identifier BaseInterfaceList? AggregateBody / "interface" @identifier ";"
InterfaceTemplateDeclaration <- "interface" @identifier TemplateParameters BaseInterfaceList Constraint AggregateBody / "interface" @identifier TemplateParameters Constraint? BaseInterfaceList? AggregateBody
StructDeclaration <- AnonStructDeclaration / StructTemplateDeclaration / "struct" @identifier AggregateBody / "struct" @identifier ";"
StructTemplateDeclaration <- "struct" @identifier TemplateParameters Constraint? AggregateBody
AnonStructDeclaration <- "struct" AggregateBody
UnionDeclaration <- AnonUnionDeclaration / UnionTemplateDeclaration / "union" @identifier AggregateBody / "union" @identifier ";"
UnionTemplateDeclaration <- "union" @identifier TemplateParameters Constraint? AggregateBody
AnonUnionDeclaration <- "union" AggregateBody
AggregateBody <- "{" DeclDefs? "}"
BaseClassList <- ":" Interfaces / ":" SuperClass "," Interfaces / ":" SuperClass
BaseInterfaceList <- ":" Interfaces
SuperClass <- BasicType
Interfaces <- Interface ("," Interface)*
Interface <- BasicType
AliasThis <- "alias" @identifier "this" ";"
EnumDeclaration <- "enum" ":" EnumBaseType EnumBody / "enum" EnumTag ":" EnumBaseType EnumBody / "enum" EnumBody / "enum" EnumTag EnumBody
EnumTag <- @identifier
EnumBaseType <- Type
EnumBody <- EnumMembersBody / EmptyEnumBody
EmptyEnumBody <- ";"
EnumMembersBody <- "{" EnumMembers "}"
EnumMembers <- EnumMember ("," EnumMember)* ","?
EnumMember <- Type @identifier "=" AssignExpression / @identifier "=" AssignExpression / @identifier
TemplateDeclaration <- "template" @identifier TemplateParameters Constraint? "{" DeclDefs? "}"
TemplateParameters <- "(" TemplateParameterList? ")"
TemplateParameterList <- TemplateParameter ("," TemplateParameter)* ","?
TemplateParameter <- TemplateThisParameter / TemplateTupleParameter / TemplateAliasParameter / TemplateValueParameter / TemplateTypeParameter
Constraint <- "if" "(" Expression ")"
TemplateInstance <- @identifier TemplateArguments
TemplateArguments <- "!" TemplateSingleArgument / "!" "(" TemplateArgumentList? ")"
TemplateArgumentList <- TemplateArgument ("," TemplateArgument)* ","?
TemplateArgument <- Symbol / AssignExpression / Type
Symbol <- "." SymbolTail / SymbolTail
SymbolTail <- TemplateInstance "." SymbolTail / TemplateInstance / @identifier "." SymbolTail / @identifier
TemplateSingleArgument <- SpecialKeyword / "this" / "null" / "false" / "true" / @floatLiteral / @integerLiteral / @stringLiteral / @characterLiteral / BasicTypeX / @identifier
TemplateTypeParameter <- @identifier TemplateTypeParameterSpecialization TemplateTypeParameterDefault / @identifier TemplateTypeParameterDefault / @identifier TemplateTypeParameterSpecialization / @identifier
TemplateTypeParameterSpecialization <- ":" Type
TemplateTypeParameterDefault <- "=" Type
TemplateThisParameter <- "this" TemplateTypeParameter
TemplateValueParameter <- BasicType Declarator TemplateValueParameterSpecialization TemplateValueParameterDefault / BasicType Declarator TemplateValueParameterDefault / BasicType Declarator TemplateValueParameterSpecialization / BasicType Declarator
TemplateValueParameterSpecialization <- ":" ConditionalExpression
TemplateValueParameterDefault <- "=" SpecialKeyword / "=" AssignExpression
TemplateAliasParameter <- "alias" BasicType Declarator TemplateAliasParameterSpecialization? TemplateAliasParameterDefault? / "alias" @identifier TemplateAliasParameterSpecialization? TemplateAliasParameterDefault?
TemplateAliasParameterSpecialization <- ":" ConditionalExpression / ":" Type
TemplateAliasParameterDefault <- "=" ConditionalExpression / "=" Type
TemplateTupleParameter <- @identifier "..."
TemplateMixinDeclaration <- "mixin" "template" @identifier TemplateParameters Constraint? "{" DeclDefs? "}"
TemplateMixin <- "mixin" MixinTemplateName TemplateArguments? @identifier? ";"
MixinTemplateName <- Typeof "." QualifiedIdentifierList / QualifiedIdentifierList / "." QualifiedIdentifierList
QualifiedIdentifierList <- TemplateInstance "." QualifiedIdentifierList / @identifier "." QualifiedIdentifierList / @identifier
AttributeSpecifier <- Attribute DeclarationBlock / Attribute ":"
Attribute <- "ref" / "pure" / "nothrow" / Property / "__gshared" / "shared" / "inout" / "immutable" / "const" / "scope" / "auto" / "synchronized" / "override" / "final" / "abstract" / "extern" / "static" / Pragma / ProtectionAttribute / DeprecatedAttribute / AlignAttribute / LinkageAttribute
DeclarationBlock <- "{" DeclDefs? "}" / DeclDef
LinkageAttribute <- "extern" "(" "C++" "," IdentifierList ")" / "extern" "(" LinkageType ")"
LinkageType <- "System" / "Pascal" / "Windows" / "D" / "C++" / "C"
AlignAttribute <- "align" "(" @integerLiteral ")" / "align"
DeprecatedAttribute <- "deprecated" "(" @stringLiteral ")" / "deprecated"
ProtectionAttribute <- "export" / "public" / "protected" / "package" "(" IdentifierList ")" / "package" / "private"
Property <- UserDefinedAttribute / "@" PropertyIdentifier
PropertyIdentifier <- "nogc" / "disable" / "system" / "trusted" / "safe" / "property"
UserDefinedAttribute <- "@" TemplateInstance "(" ArgumentList? ")" / "@" TemplateInstance / "@" @identifier "(" ArgumentList? ")" / "@" @identifier / "@" "(" ArgumentList ")"
Pragma <- "pragma" "(" @identifier "," ArgumentList ")" / "pragma" "(" @identifier ")"
ConditionalDeclaration <- Condition DeclarationBlock "else" ":" DeclDefs? / Condition ":" DeclDefs? / Condition DeclarationBlock "else" DeclarationBlock / Condition DeclarationBlock
ConditionalStatement <- Condition NoScopeNonEmptyStatement "else" NoScopeNonEmptyStatement / Condition NoScopeNonEmptyStatement
Condition <- StaticIfCondition / DebugCondition / VersionCondition
VersionCondition <- "version" "(" "assert" ")" / "version" "(" "unittest" ")" / "version" "(" @identifier ")" / "version" "(" @integerLiteral ")"
DebugCondition <- "debug" "(" @identifier ")" / "debug" "(" @integerLiteral ")" / "debug"
StaticIfCondition <- "static" "if" "(" AssignExpression ")"
VersionSpecification <- "version" "=" @integerLiteral ";" / "version" "=" @identifier ";"
DebugSpecification <- "debug" "=" @integerLiteral ";" / "debug" "=" @identifier ";"
StaticAssert <- "static" "assert" "(" AssignExpression "," AssignExpression ")" ";" / "static" "assert" "(" AssignExpression ")" ";"
Module <- ModuleDeclaration DeclDefs / DeclDefs
DeclDefs <- DeclDef+
DeclDef <- ";" / MixinDeclaration / TemplateMixin / TemplateMixinDeclaration / TemplateDeclaration / StaticAssert / VersionSpecification / DebugSpecification / ConditionalDeclaration / SharedStaticDestructor / SharedStaticConstructor / StaticDestructor / StaticConstructor / AliasThis / UnitTest / Invariant / Deallocator / Allocator / Postblit / Destructor / Constructor / Declaration / AttributeSpecifier
ModuleDeclaration <- "module" ModuleFullyQualifiedName ";"
ModuleFullyQualifiedName <- ModuleName ("." ModuleName)*
ModuleName <- @identifier
ImportDeclaration <- "static import" ImportList ";" / "import" ImportList ";"
ImportList <- Import "," ImportList / ImportBindings / Import
Import <- ModuleAliasIdentifier "=" ModuleFullyQualifiedName / ModuleFullyQualifiedName
ImportBindings <- Import ":" ImportBindList
ImportBindList <- ImportBind ("," ImportBind)*
ImportBind <- @identifier "=" @identifier / @identifier
ModuleAliasIdentifier <- @identifier
MixinDeclaration <- "mixin" "(" AssignExpression ")" ";"
